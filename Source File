#include<Wire.h>
#include<SoftwareSerial.h>
SoftwareSerial bluetooth(0,1);
#define Kp 20
#define Kd 5
#define Ki 0.5
const int MPU_addr=0x68;
int16_t AcX,AcY,AcZ,Tmp,GyX,GyY,GyZ;
int c,mode, angle;
char s;
int minVal=265;
int maxVal=402;
int num = 0;
int setpoint = 0;
double x;
double y;
double z;
double yprev;
int ave;
//float rate = 0.0;
float output = 0.0;
void setup() {
  // put your setup code here, to run once:
 Wire.begin();
Wire.beginTransmission(MPU_addr);
Wire.write(0x6B);
Wire.write(0);
Wire.endTransmission(true);
Serial.begin(19200);
bluetooth.begin(9600);
pinMode(5, OUTPUT);
pinMode(6, OUTPUT);
//pinMode(7, OUTPUT);
}

void loop() {
  // put your main code here, to run repeatedly:
//int accel = bluecon(mode);
Wire.beginTransmission(MPU_addr);
  Wire.write(0x3B);
  Wire.endTransmission(false);
  Wire.requestFrom(MPU_addr,14,true);
  AcX=Wire.read()<<8|Wire.read();
  AcY=Wire.read()<<8|Wire.read();
  AcZ=Wire.read()<<8|Wire.read();
    int xAng = map(AcX,minVal,maxVal,-90,90);
    int yAng = map(AcY,minVal,maxVal,-90,90);
    int zAng = map(AcZ,minVal,maxVal,-90,90);

       x= RAD_TO_DEG * (atan2(-yAng, -zAng)+PI);
       y= RAD_TO_DEG * (atan2(-xAng, -zAng)+PI);
       z= RAD_TO_DEG * (atan2(-yAng, -xAng)+PI);
y=map(y,0,360,180,-180);
 y=180-y;
 //num++;
 Serial.print(y);
 Serial.print("\t");
 angle = smoothen(ave);
 if ( angle <18 || angle>345){                 //angle constraints for easy riding
 if (angle<180){motor(HIGH);}
 //}
 else {motor(LOW);}}
 else {analogWrite(5,0);}
int tilt = PIDi(c);//*accel;
Serial.println(tilt);
analogWrite(5,tilt);
}

void motor(boolean dir)                        //Motor control
  {
    //dir=HIGH;
    digitalWrite(6,dir);
   //digitalWrite(7,!dir);//Direction reversal
  }

int PIDi(int PWM)                             //PID control
{
  float lasttime=0;
  float errsum=0;
  float derror=0;
  double lasterror=0;
  float instime = millis();
  float dt = instime - (lasttime);
  double error = angle - setpoint;
  errsum += (error*dt);
  derror = (error - lasterror)/dt;
  float prop = Kp * error;
  float det = Kd * errsum;
  float intg = Ki * derror;
  int output = prop + det + intg;
  lasttime = instime;
  lasterror = error;
 
  return output/1000;
}
int bluecon(int mode)                         //Bluetooth unlock feature
{
  while(bluetooth.available()>0)
  {
    s = bluetooth.read();
    }
    //mode selection
     if (s == '1')
      {
        return 0.5;}
      else if (s == '2')
      {
        return 1.7;        
      }
      if (s == '3')
      {//password protection
        string pass = bluetooth.read()
        if (pass != 12345)
        {
          return 0
        }
      }
}
int smoothen(int ave)                         //Smoothening of IMU outputs
{
   int total = 0;
   total = total + y;
   int yave = total/10;
   return yave;
}
